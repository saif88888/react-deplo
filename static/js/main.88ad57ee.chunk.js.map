{"version":3,"sources":["components/card/index.jsx","components/board/index.jsx","deck.js","components/navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","src","Board","cards","dimension","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","Navbar","props","newGame","App","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","useEffect","resizeBoard","preloadImages","resizeListner","window","addEventListener","removeEventListener","Image","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientwidth","clientHeight","setTimeout","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88ad57ee.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./styles.css\";\n\nexport default function Card({\n  handleClick,\n  id,\n  type,\n  flipped,\n  solved,\n  height,\n  width,\n  disabled,\n}) {\n  return (\n    <div\n      className={`flip-container ${flipped ? \"flipped\" : \"\"}`}\n      style={{\n        width,\n        height,\n      }}\n      onClick={() => (disabled ? null : handleClick(id))}\n    >\n      <div className=\"flipper\">\n        <img\n          style={{ height, width }}\n          className={flipped ? \"front\" : \"back\"}\n          src={\n            flipped || solved\n              ? `https://raw.githubusercontent.com/saif88888/react-deplo/master/public/img/${type}.png`\n              : `https://raw.githubusercontent.com/saif88888/react-deplo/master/public/img/X.png`\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  solved: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired,\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport Card from \"../card\";\nimport \"./styles.css\";\n\nexport default function Board({\n  disabled,\n  dimension,\n  cards,\n  flipped,\n  solved,\n  handleClick,\n}) {\n  return (\n    <div className=\"board\">\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          width={100}\n          height={100}\n          flipped={flipped.includes(card.id)}\n          solved={solved.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solved.includes(card.id)}\n        />\n      ))}\n    </div>\n  );\n}\nBoard.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  dimension: PropTypes.number.isRequired,\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","function shuffle(array) {\n  const _array = array.slice(0);\n  for (let i = 0; i < array.length - 1; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temp = _array[i];\n    _array[i] = _array[randomIndex];\n    _array[randomIndex] = temp;\n  }\n\n  return _array;\n}\nexport default function initializeDeck() {\n  let id = 0;\n  const cards = [\n    \"bear\",\n    \"Dog\",\n    \"Frog\",\n    \"Hamster\",\n    \"Koala\",\n    \"rabbit\",\n    \"tiger\",\n    \"Whale\",\n  ].reduce((acc, type) => {\n    acc.push({\n      id: id++,\n      type,\n    });\n    acc.push({\n      id: id++,\n      type,\n    });\n    return acc;\n  }, []);\n\n  return shuffle(cards);\n}\n","import React from \"react\";\n\nconst Navbar = (props) => (\n  <li className=\"nav-item\">\n    <div onClick={() => props.newGame()}>Restart</div>\n  </li>\n);\n\nexport default Navbar;\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/board\";\nimport initializeDeck from \"./deck\";\nimport Navbar from \"./components/navbar\";\n\nexport default function App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n\n  useEffect(() => {\n    preloadImages();\n  }, [cards]);\n\n  useEffect(() => {\n    const resizeListner = window.addEventListener(\"resize\", resizeBoard);\n\n    return () => window.removeEventListener(\"resize\", resizeListner);\n  });\n  const handleClick = (id) => {\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 500);\n      }\n    }\n  };\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDeck());\n  };\n  const preloadImages = () => {\n    cards.map((card) => {\n      const src = `/img/${card.type}.png`;\n\n      new Image().src = src;\n    });\n  };\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = (id) => flipped.includes(id);\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id);\n    const flippedCard = cards.find((card) => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientwidth,\n        document.documentElement.clientHeight\n      )\n    );\n  };\n  return (\n    <div>\n      <h2>Milestone III - Memory Game</h2>\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n      <Navbar newGame={newGame} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}